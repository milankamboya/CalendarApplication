<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:tx="http://www.springframework.org/schema/tx" 
	xmlns:context="http://www.springframework.org/schema/context"  
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation=
		"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.0.xsd 
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-2.0.xsd"
		default-lazy-init="true">

	<context:component-scan base-package="com.global.*" />
	<tx:annotation-driven proxy-target-class="true" transaction-manager="transactionManager"/>
	<!-- <aop:config proxy-target-class="true"/> -->
	
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<property name="url" value="jdbc:mysql://localhost:3306/calendarappdb" />
		<property name="username" value="root" />
		<property name="password" value="root" />
	</bean>

	<bean id="baseSessionFactory"	class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="mappingLocations">
			<value>classpath*:com/global/domain/*.hbm.xml</value>
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect"> org.hibernate.dialect.MySQLDialect</prop>
				<prop key="hibernate.show_sql">true</prop>
				<!-- <prop key="hibernate.hbm2ddl.auto">create</prop> -->
				<!-- <prop key="hibernate.cache.use_query_cache">true</prop> -->
				<prop key="hibernate.jdbc.fetch_size">300</prop>
			</props>
		</property>
	</bean>
	
	<bean id="transactionManager" class="com.global.common.framework.impl.HibernateTransactionManager">
		<property name="sessionFactory" ref="baseSessionFactory" />
		<property name="nestedTransactionAllowed" value="true" />
		<property name="globalRollbackOnParticipationFailure" value="false" />
	</bean>
	
	<!-- This is to use with bean defining in XML. Check below hibernateDao bean -->
	<bean id="txAttribute" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean" abstract="true">
		<property name="transactionManager" ref="transactionManager" />
		<property name="transactionAttributes">
			<props>
				<prop key="*">PROPAGATION_REQUIRED</prop>
			</props>
		</property>
	</bean>
	
	<bean id="hibernateDao" parent="txAttribute">
		<property name="target">
			<bean class="com.global.common.framework.impl.HibernateDaoImpl">
				<property name="sessionFactory" ref="baseSessionFactory"></property>
			</bean>
		</property>
	</bean>
	
	
	<!-- Shiro filter -->
	<bean id="ShiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
	    <property name="securityManager" ref="securityManager"/>
	    <!-- override these for application-specific URLs if you like: -->
	    <property name="loginUrl" value="/login"/>
	    <property name="successUrl" value="/home"/>
	    <!-- <property name="unauthorizedUrl" value="/unauthorized.jsp"/> -->
	    <!-- The 'filters' property is not necessary since any declared javax.servlet.Filter bean  -->
	    <!-- defined will be automatically acquired and available via its beanName in chain        -->
	    <!-- definitions, but you can perform instance overrides or name aliases here if you like: -->
	    <!-- <property name="filters">
	        <util:map>
	            <entry key="anAlias" value-ref="someFilter"/>
	        </util:map>
	    </property> -->
	    <property name="filterChainDefinitions">
	        <value>
	            /** = authc
	        </value>
	    </property>
	</bean>
	
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
	    <!-- Single realm app.  If you have multiple realms, use the 'realms' property instead. -->
	    <!-- <property name="realm" value="ADMIN"/> -->
	    <!-- By default the servlet container sessions will be used.  Uncomment this line
	         to use shiro's native sessions (see the JavaDoc for more): -->
	    <!-- <property name="sessionMode" value="native"/> -->
	</bean>
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
	
	<!-- Define the Shiro Realm implementation you want to use to connect to your back-end -->
	<!-- security datasource: -->
	<!-- <bean id="myRealm" class="...">
	</bean> -->
		
	
</beans>